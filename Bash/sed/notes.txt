# Certainly! The `sed` command in Bash is a powerful stream editor used for parsing and transforming text.
Hereâ€™s a simple introduction to using `sed` with some basic examples: 

## Basic Syntax
- The general syntax for sed is:

sed [options] 'command' file


## Common Use Cases

- 1.Substituting Text
You can use sed to replace text in a file. The syntax for substitution is:

# s stands for substitute.

$ sed 's/old-text/new-text/' filename

* ex1
sed 's/apple/orange/' fruits.txt

- 2.Global Replacement
By default, sed only replaces the first occurrence of the pattern in each line. 
To replace all occurrences, add the g flag:

$ sed 's/apple/orange/g' fruits.txt

- 3.Editing Files In-Place
If you want to edit the file directly, use the -i optio

$ sed -i 's/apple/orange/g' fruits.txt

- 4.Printing Specific Lines
You can use sed to print specific lines from a file. 
For example, to print the first 10 lines:
$ sed -n '1,10p' filename

- 5.Deleting Lines
To delete specific lines, you can use the d command. 
For example, to delete the second line:
$ sed '2d' filename

To delete a range of lines (e.g., lines 2 to 4):

$ sed '2,4d' filename

Using Regular Expressions


- 6.sed supports regular expressions, allowing for more complex text matching. 
For example, to replace any digit with #:
sed 's/[0-9]/#/g' filename


* Example Usage
Assuming you have a file named example.txt with the following content:
apple
banana
apple pie
grape

- You can run these commands:

Replace "apple" with "orange":
$sed 's/apple/orange/g' example.txt

Delete the second line:
$ sed '2d' example.txt

Print lines 1 to 3:
$ sed -n '1,3p' example.txt


# Basic Regular Expressions in sed
